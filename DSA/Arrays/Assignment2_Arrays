Implementation in Python

Question:1

def arrayPairSum(nums):
    nums.sort()  # Sort the array in ascending order
    max_sum = 0

    # Pair up the numbers by taking every alternate element
    for i in range(0, len(nums), 2):
        max_sum += nums[i]

    return max_sum


nums = [1, 4, 3, 2]
result = arrayPairSum(nums)
print(result) 


--------------------------------------------------------------------------------------------------------------

Question:2

def max_num_of_different_types(candyType):
    unique_types = len(set(candyType))
    max_types = len(candyType) // 2
    return min(unique_types, max_types)

candyType = [1, 1, 2, 2, 3, 3]
print(max_num_of_different_types(candyType))


--------------------------------------------------------------------------------------------------------------


Question:3

def findLHS(nums):
    num_counts = {}
    for num in nums:
        if num in num_counts:
            num_counts[num] += 1
        else:
            num_counts[num] = 1

    max_length = 0
    for num in num_counts:
        if num + 1 in num_counts:
            length = num_counts[num] + num_counts[num + 1]
            if length > max_length:
                max_length = length

    return max_length

nums = [1, 3, 2, 2, 5, 2, 3, 7]
print(findLHS(nums))



--------------------------------------------------------------------------------------------------------------


Question:4

def canPlaceFlowers(flowerbed, n):
    count = 0
    length = len(flowerbed)

    for i in range(length):
        if (
            flowerbed[i] == 0 and
            (i == 0 or flowerbed[i - 1] == 0) and
            (i == length - 1 or flowerbed[i + 1] == 0)
        ):
            flowerbed[i] = 1
            count += 1

    return count >= n

flowerbed = [1, 0, 0, 0, 1]
n = 1
print(canPlaceFlowers(flowerbed, n))

--------------------------------------------------------------------------------------------------------------


Question:5

def maximumProduct(nums):
    nums.sort()
    n = len(nums)
    return max(nums[n-1] * nums[n-2] * nums[n-3], nums[0] * nums[1] * nums[n-1])


nums = [1, 2, 3]
print(maximumProduct(nums))

--------------------------------------------------------------------------------------------------------------

Question:6


def search(nums, target):
    left, right = 0, len(nums) - 1

    while left <= right:
        mid = (left + right) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1

nums = [-1, 0, 3, 5, 9, 12]
target = 9
print(search(nums, target))


--------------------------------------------------------------------------------------------------------------

Question:7

def isMonotonic(nums):
    is_increasing = True
    is_decreasing = True

    for i in range(1, len(nums)):
        if nums[i] > nums[i - 1]:
            is_decreasing = False
        if nums[i] < nums[i - 1]:
            is_increasing = False

    return is_increasing or is_decreasing

nums = [1, 2, 2, 3]
print(isMonotonic(nums))

--------------------------------------------------------------------------------------------------------------

Question:8

def minScore(nums, k):
    min_num = min(nums)
    max_num = max(nums)

    if max_num - min_num <= 2 * k:
        return 0

    new_min = min_num + k
    new_max = max_num - k

    if new_min > new_max:
        return 0

    return new_max - new_min

nums = [1]
k = 0
print(minScore(nums, k))


--------------------------------------------------------------------------------------------------------------
