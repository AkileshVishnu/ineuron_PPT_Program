
Implementation in Python

Question1:


def convert_to_2d(original, m, n):
    if m * n != len(original):
        return []  # Return an empty 2D array if it is impossible

    result = [[0] * n for _ in range(m)]  # Initialize an empty m x n 2D array

    for i in range(len(original)):
        row = i // n  # Calculate the row index
        col = i % n   # Calculate the column index
        result[row][col] = original[i]

    return result
    
----------------------------------------------------------------------------------------------------------------------------------

Question2:


----------------------------------------------------------------------------------------------------------------------------------


Question3:

def sorted_squares(nums):
    squares = [num ** 2 for num in nums]  # Square each number using list comprehension
    sorted_squares = sorted(squares)  # Sort the squared numbers
    return sorted_squares


----------------------------------------------------------------------------------------------------------------------------------

Question4:



def find_disjoint(nums1, nums2):
    distinct_nums1 = [num for num in nums1 if num not in nums2]  # List comprehension: elements in nums1 but not in nums2
    distinct_nums2 = [num for num in nums2 if num not in nums1]  # List comprehension: elements in nums2 but not in nums1

    return [distinct_nums1, distinct_nums2]

----------------------------------------------------------------------------------------------------------------------------------

Question5:



----------------------------------------------------------------------------------------------------------------------------------

Question6:


def find_duplicates(nums):
    duplicates = []
    
    for num in nums:
        index = abs(num) - 1
        
        if nums[index] < 0:
            duplicates.append(abs(num))
        else:
            nums[index] = -nums[index]
    
    return duplicates


----------------------------------------------------------------------------------------------------------------------------------

Question7:

def find_min(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        if nums[mid] > nums[right]:
            left = mid + 1
        else:
            right = mid

    return nums[left]

----------------------------------------------------------------------------------------------------------------------------------

Question8:



----------------------------------------------------------------------------------------------------------------------------------
