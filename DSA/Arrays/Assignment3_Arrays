Implementation n Python

Question1:


def threeSumClosest(nums, target):
    nums.sort()  # Sort the array in ascending order
    closest_sum = float('inf')  # Initialize closest sum to infinity

    for i in range(len(nums) - 2):
        left = i + 1  # Left pointer
        right = len(nums) - 1  # Right pointer

        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]  # Calculate current sum

            if current_sum == target:
                return current_sum  # Found the exact target sum, return it

            # Update closest_sum if current sum is closer to target
            if abs(current_sum - target) < abs(closest_sum - target):
                closest_sum = current_sum

            if current_sum < target:
                left += 1  # Increment left pointer for a larger sum
            else:
                right -= 1  # Decrement right pointer for a smaller sum

    return closest_sum  # Return the closest sum

# Example usage
nums = [-1, 2, 1, -4]
target = 1
result = threeSumClosest(nums, target)
print(result)


----------------------------------------------------------------------------------------------------------------------------------

Question2:


def fourSum(nums, target):
    nums.sort()  # Sort the array in ascending order
    result = []

    for i in range(len(nums) - 3):
        if i > 0 and nums[i] == nums[i - 1]:
            continue  # Skip duplicates for the first element

        for j in range(i + 1, len(nums) - 2):
            if j > i + 1 and nums[j] == nums[j - 1]:
                continue  # Skip duplicates for the second element

            left = j + 1  # Left pointer
            right = len(nums) - 1  # Right pointer

            while left < right:
                current_sum = nums[i] + nums[j] + nums[left] + nums[right]  # Calculate current sum

                if current_sum == target:
                    result.append([nums[i], nums[j], nums[left], nums[right]])  # Quadruplet found

                    # Skip duplicates for the third and fourth elements
                    while left < right and nums[left] == nums[left + 1]:
                        left += 1
                    while left < right and nums[right] == nums[right - 1]:
                        right -= 1

                    left += 1
                    right -= 1
                elif current_sum < target:
                    left += 1  # Increment left pointer for a larger sum
                else:
                    right -= 1  # Decrement right pointer for a smaller sum

    return result


# Example usage
nums = [1, 0, -1, 0, -2, 2]
target = 0
result = fourSum(nums, target)
print(result)


----------------------------------------------------------------------------------------------------------------------------------


Question3:


def next_permutation(nums):
    i = len(nums) - 2
    while i >= 0 and nums[i + 1] <= nums[i]:
        i -= 1
    if i >= 0:
        j = len(nums) - 1
        while nums[j] <= nums[i]:
            j -= 1
        nums[i], nums[j] = nums[j], nums[i]
    reverse(nums, i + 1)
    return nums

 
def reverse(nums, start):
    i, j = start, len(nums) - 1
    while i < j:
        nums[i], nums[j] = nums[j], nums[i]
        i += 1
        j -= 1
        

nxt_pmu=next_permutation([7,5,8,3])
print(nxt_pmu)





----------------------------------------------------------------------------------------------------------------------------------

Question4:



def searchInsert(nums, target):
    left = 0
    right = len(nums) - 1

    while left <= right:
        mid = left + (right - left) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return left

# Example usage
nums = [1, 3, 5, 6]
target = 5
index = searchInsert(nums, target)
print(index)
----------------------------------------------------------------------------------------------------------------------------------

Question5:

def plusOne(digits):
    carry = 1  # Initialize carry to 1

    for i in range(len(digits) - 1, -1, -1):
        digits[i] += carry
        carry = digits[i] // 10
        digits[i] %= 10

    if carry:
        digits.insert(0, 1)

    return digits

# Example usage
digits = [1, 2, 3]
result = plusOne(digits)
print(result)


----------------------------------------------------------------------------------------------------------------------------------

Question6:


def singleNumber(nums):
    result = 0
    for num in nums:
        result ^= num
    return result

# Example usage
nums = [2, 2, 1]
result = singleNumber(nums)
print(result)



----------------------------------------------------------------------------------------------------------------------------------

Question7:
def findMissingRanges(nums, lower, upper):
    ranges = []
    prev = lower - 1  # Initialize prev to a number smaller than lower

    for num in nums + [upper + 1]:  # Append upper + 1 to include the upper bound
        if num - prev > 1:
            ranges.append(formatRange(prev + 1, num - 1))
        prev = num

    return ranges

def formatRange(lower, upper):
    if lower == upper:
        return str(lower)
    else:
        return str(lower) + "->" + str(upper)

# Example usage
nums = [0, 1, 3, 50, 75]
lower = 0
upper = 99
result = findMissingRanges(nums, lower, upper)
print(result)



----------------------------------------------------------------------------------------------------------------------------------

Question8:


def canAttendMeetings(intervals):
    intervals.sort(key=lambda x: x[0])  # Sort intervals based on start time

    for i in range(1, len(intervals)):
        if intervals[i][0] < intervals[i-1][1]:
            return False  # Overlapping intervals found

    return True  # No overlapping intervals found

# Example usage
intervals = [[0, 30], [5, 10], [15, 20]]
result = canAttendMeetings(intervals)
print(result)


----------------------------------------------------------------------------------------------------------------------------------
